CFLAGS ?= -O2
CFLAGS += -Wall
PYFLAKES ?= pyflakes3
SHELLCHECK ?= shellcheck
CRONTAB ?= crontab

version		:= $(file < VERSION)

schedules			:= @schedules@
schedules_not			:= @schedules_not@
schedules_all			:= $(schedules) $(schedules_not)
enable_runparts		:= @enable_runparts@
enable_setgid		:= @enable_setgid@
use_loglevelmax		:= @use_loglevelmax@

prefix		:= @prefix@
bindir		:= @bindir@
datadir		:= @datadir@
libdir		:= @libdir@
libexecdir	:= @libexecdir@
statedir	:= @statedir@
mandir		:= @mandir@
docdir		:= @docdir@
unitdir		:= @unitdir@
generatordir	:= @generatordir@

srcdir		:= $(CURDIR)/src
outdir		:= $(CURDIR)/out
builddir	:= $(outdir)/build
distname	:= systemd-cron-$(version)
distdir		:= $(outdir)/dist/$(distname)
tarball		:= $(outdir)/dist/$(distname).tar.xz

ifneq ($(enable_runparts),no)
out_services	:= $(foreach schedule,$(schedules),$(builddir)/units/cron-$(schedule).service)
out_timers		:= $(foreach schedule,$(schedules),$(builddir)/units/cron-$(schedule).timer)
out_targets		:= $(foreach schedule,$(schedules),$(builddir)/units/cron-$(schedule).target)
else
out_services	:= $(builddir)/units/systemd-cron-cleaner.service
out_timers	:= $(builddir)/units/systemd-cron-cleaner.timer
out_targets	:=
endif
out_units		:= $(out_services) $(out_timers) $(out_targets) $(builddir)/units/cron.target \
                           $(builddir)/units/cron-update.path $(builddir)/units/cron-update.service \
                           $(builddir)/units/cron-failure@.service
out_manuals		:= $(patsubst $(srcdir)/man/%.in,$(builddir)/man/%,$(wildcard $(srcdir)/man/*))
out_programs_py		:= $(subst $(srcdir),$(builddir),$(patsubst %.py,%,$(wildcard $(srcdir)/bin/*.py)))
out_programs_sh		:= $(subst $(srcdir),$(builddir),$(patsubst %.sh,%,$(wildcard $(srcdir)/bin/*.sh)))
out_programs_cpp	:= $(subst $(srcdir),$(builddir),$(patsubst %.cpp,%,$(wildcard $(srcdir)/bin/*.cpp)))
out_programs_c		:= $(subst $(srcdir),$(builddir),$(patsubst %.c,%,$(wildcard $(srcdir)/bin/*.c)))
outputs			:= $(out_units) $(out_manuals) $(out_programs_py) $(out_programs_sh) $(out_programs_cpp) $(out_programs_c)

define \n


endef

null :=
ifneq ($(enable_runparts),no)
requires = $(subst ${null} ${null},\n,$(foreach schedule,$(schedules),Requires=cron-$(schedule).timer))
else
requires = Requires=systemd-cron-cleaner.timer
endif
use_runparts = $(if $(filter $(enable_runparts),yes),true,false)

# $(call in2out,$input,$output,$schedule,$requires)
define in2out

	sed \
		-e "s|\@statedir\@|$(statedir)|g" \
		-e "s|\@libdir\@|$(libdir)|g" \
		-e "s|\@libexecdir\@|$(libexecdir)|g" \
		-e "s|\@unitdir\@|$(unitdir)|g" \
		-e "s|\@use_runparts\@|$(use_runparts)|g" \
		-e "s|\@version\@|$(version)|g" \
		-e "s|\@use_loglevelmax\@|$(use_loglevelmax)|g" \
		-e "s|\@schedule\@|$3|g" \
		-e "s|\@requires\@|$4|g" \
		$1 > $2
endef

all: $(outputs)

clean:
	rm -rf $(outdir)

distprep: $(distdir)
	cp -a configure		$(distdir)
	cp -a Makefile.in	$(distdir)
	cp -a LICENSE		$(distdir)
	cp -a README.md		$(distdir)
	cp -a VERSION		$(distdir)
	cp -a src		$(distdir)

dist: $(tarball)

test: all
	$(foreach manpage,$(out_manuals),\
		man --warnings --encoding=utf8 --local-file $(manpage) 2>&1 > /dev/null${\n})
	$(foreach program,$(out_programs_py),\
		$(PYFLAKES) $(program) ${\n})
	$(SHELLCHECK) $(out_programs_sh)
	test/test.py

install: all
	install -m755 -D $(builddir)/bin/crontab $(DESTDIR)$(bindir)/$(CRONTAB)
	install -m755 -D $(builddir)/bin/systemd-crontab-generator $(DESTDIR)$(generatordir)/systemd-crontab-generator
	install -m755 -D $(builddir)/bin/remove_stale_stamps $(DESTDIR)$(libexecdir)/systemd-cron/remove_stale_stamps
	install -m755 -D $(builddir)/bin/mail_on_failure $(DESTDIR)$(libexecdir)/systemd-cron/mail_on_failure
	install -m755 -D $(builddir)/bin/boot_delay $(DESTDIR)$(libexecdir)/systemd-cron/boot_delay
	install -m644 -D $(srcdir)/lib/sysusers.d/systemd-cron.conf $(DESTDIR)$(libdir)/sysusers.d/systemd-cron.conf
ifneq ($(enable_setgid),no)
	install -m755 -D $(builddir)/bin/crontab_setgid $(DESTDIR)$(libexecdir)/systemd-cron/crontab_setgid
	if getent group cron > /dev/null 2>&1; then \
	    chgrp cron $(DESTDIR)$(libexecdir)/systemd-cron/crontab_setgid ; \
	    chmod 2755 $(DESTDIR)$(libexecdir)/systemd-cron/crontab_setgid ; \
	fi
endif

	install -m644 -D $(builddir)/man/systemd.cron.7 $(DESTDIR)$(mandir)/man7/systemd.cron.7
	install -m644 -D $(builddir)/man/crontab.1 $(DESTDIR)$(mandir)/man1/$(CRONTAB).1
	install -m644 -D $(builddir)/man/crontab.5 $(DESTDIR)$(mandir)/man5/$(CRONTAB).5
	install -m644 -D $(builddir)/man/anacrontab.5 $(DESTDIR)$(mandir)/man5/anacrontab.5
	install -m644 -D $(builddir)/man/systemd-crontab-generator.8 $(DESTDIR)$(mandir)/man8/systemd-crontab-generator.8

	install -m644 -D $(builddir)/units/cron.target $(DESTDIR)$(unitdir)/cron.target
	install -m644 $(builddir)/units/cron-update.path $(DESTDIR)$(unitdir)
	install -m644 $(builddir)/units/cron-update.service $(DESTDIR)$(unitdir)
	install -m644 $(builddir)/units/cron-failure@.service $(DESTDIR)$(unitdir)

ifneq ($(enable_runparts),no)
	$(foreach schedule,$(schedules),\
		install -m644 $(builddir)/units/cron-$(schedule).timer $(DESTDIR)$(unitdir)${\n})
	$(foreach schedule,$(schedules),\
		install -m644 $(builddir)/units/cron-$(schedule).target $(DESTDIR)$(unitdir)${\n})
	$(foreach schedule,$(schedules),\
		install -m644 $(builddir)/units/cron-$(schedule).service $(DESTDIR)$(unitdir)${\n})
else
	install -m644 $(builddir)/units/systemd-cron-cleaner.timer $(DESTDIR)$(unitdir)
	install -m644 $(builddir)/units/systemd-cron-cleaner.service $(DESTDIR)$(unitdir)
endif

$(builddir)/units/cron-update.path: $(srcdir)/units/cron-update.path.in
	$(call in2out,$<,$@)
ifeq ($(enable_runparts),no)
	echo 'PathChanged=/etc/cron.hourly' >> $@
	echo 'PathChanged=/etc/cron.daily' >> $@
	echo 'PathChanged=/etc/cron.weekly' >> $@
	echo 'PathChanged=/etc/cron.monthly' >> $@
endif

$(builddir)/units/cron-update.service: $(srcdir)/units/cron-update.service.in
	$(call in2out,$<,$@)

$(builddir)/units/cron-failure@.service: $(srcdir)/units/cron-failure@.service.in
	$(call in2out,$<,$@)

$(builddir)/units/cron-%.service: $(srcdir)/units/cron-schedule.service.in
	$(call in2out,$<,$@,$*)
ifeq ($(use_loglevelmax),no)
	sed -i -e '/^LogLevelMax=/d' $@
endif

$(builddir)/units/cron-boot.service: $(srcdir)/units/cron-boot.service.in
	$(call in2out,$<,$@,boot)

$(builddir)/units/cron-%.timer: $(srcdir)/units/cron-schedule.timer.in
	$(call in2out,$<,$@,$*)

$(builddir)/units/cron-boot.timer: $(srcdir)/units/cron-boot.timer.in
	$(call in2out,$<,$@,boot)

$(builddir)/units/cron-%.target: $(srcdir)/units/cron-schedule.target.in
	$(call in2out,$<,$@,$*)

$(builddir)/units/cron.target: $(srcdir)/units/cron.target.in
	$(call in2out,$<,$@,,$(requires))

$(builddir)/units/systemd-cron-cleaner.service: $(srcdir)/units/systemd-cron-cleaner.service.in
	$(call in2out,$<,$@)

$(builddir)/units/systemd-cron-cleaner.timer: $(srcdir)/units/systemd-cron-cleaner.timer.in
	$(call in2out,$<,$@)

$(builddir)/man/%: $(srcdir)/man/%.in
	$(call in2out,$<,$@)

$(builddir)/man/systemd.cron.7: $(srcdir)/man/systemd.cron.7.in
	$(call in2out,$<,$@)
ifneq ($(enable_runparts),no)
	$(foreach schedule_not,$(schedules_not),\
		sed -i $@ -e '/cron-$(schedule_not).timer/d' \
	               -e '/cron\.$(schedule_not)/,+3d' ${\n})
else
	sed -i $@ -e '/run-parts/d'
	sed -i $@ -e '/cron-\\fIschedule\\fR\.timer/,+14d'
	$(foreach schedule_not,$(schedules_not),\
		sed -i $@ -e '/cron\.$(schedule_not)/,+3d' ${\n})
	$(foreach schedule_all,$(schedules_all),\
		sed -i $@ -e '/cron-$(schedule_all).timer/d' ${\n})
endif

comma = ,
schedules_not_cpp := $(sort $(patsubst %,"%"sv$(comma)${\n},$(schedules_not)))
$(builddir)/include/configuration.hpp : $(srcdir)/include/configuration.hpp.in Makefile
	sed -e 's:\@use_loglevelmax\@:$(use_loglevelmax):' \
	    -e 's:\@use_runparts\@:$(use_runparts):' \
	    -e 's:\@libexecdir\@:$(libexecdir):' \
	    -e 's:\@statedir\@:$(statedir):' \
	    -e 's:\@schedules_not\@:$(schedules_not_cpp):' $< > $@

$(builddir)/include/%.hpp: $(srcdir)/include/%.hpp
	ln $< $@ 2>/dev/null || cp $< $@

CXXVER := $(shell $(CXX) --version | { read -r l; echo "$$l"; })
ifneq "$(findstring clang,$(CXXVER))" ""
	# clang doesn't use PCHs automatically
	PCH_ARG := -include-pch $(builddir)/include/libvoreutils.hpp.gch
else
	PCH_ARG :=
endif

common_headers := $(builddir)/include/configuration.hpp $(builddir)/include/libvoreutils.hpp.gch $(builddir)/include/util.hpp
$(builddir)/include/libvoreutils.hpp.gch : $(builddir)/include/libvoreutils.hpp
	$(CXX) -Wall -Wextra -fno-exceptions $(CFLAGS) $(CPPFLAGS)                        -std=c++20 -I $(builddir)/include            $< -o $@

$(builddir)/bin/systemd-crontab-generator: $(srcdir)/bin/systemd-crontab-generator.cpp $(common_headers)
	$(CXX) -Wall -Wextra -fno-exceptions $(CFLAGS) $(CPPFLAGS) $(LDFLAGS) @libcrypto@ -std=c++20 -I $(builddir)/include $(PCH_ARG) $< -o $@

$(builddir)/bin/crontab: $(srcdir)/bin/crontab.cpp $(common_headers)
	$(CXX) -Wall -Wextra -fno-exceptions $(CFLAGS) $(CPPFLAGS) $(LDFLAGS)             -std=c++20 -I $(builddir)/include $(PCH_ARG) $< -o $@

$(builddir)/bin/%: $(srcdir)/bin/%.py
	$(call in2out,$<,$@)
	chmod +x $@

$(builddir)/bin/%: $(srcdir)/bin/%.sh
	$(call in2out,$<,$@)
	chmod +x $@

$(builddir)/bin/crontab_setgid: $(srcdir)/bin/crontab_setgid.c
ifneq ($(enable_setgid),no)
	$(CC) $(CFLAGS) $(CPPFLAGS) $(LDFLAGS) $< -DCRONTAB_DIR='"$(statedir)"' -o $@
endif

$(outputs): $(builddir)

$(outdir):
	mkdir -p $@

$(builddir):
	mkdir -p $@/bin $@/man $@/units $@/include

$(distdir):
	mkdir -p $(distdir)

$(tarball): distprep
	cd $(distdir)/..; tar -cJ --owner=root --group=root --file $(tarball) $(distname)

.PHONY: all clean dist distprep install
